@startuml
' Enums
enum Course {
    SCY
    SCM
    LCM
}
enum CourseUnit {
    YARDS
    METERS
}
enum StrokeType {
    FREESTYLE
    BACKSTROKE
    BREASTSTROKE
    BUTTERFLY
    INDIVIDUAL_MEDLEY
    FREE_KICK
    DRILL
}
enum Effort {
    EASY            // recovery, technique
    ENDURANCE       // aerobic steady
    THRESHOLD       // lactate threshold
    RACE_PACE       // target event pace
    VO2_MAX         // high aerobic power work
    SPRINT          // max effort, pure speed
}
' Core Entity:  Swimmer (holds current truth for seed times)
class Swimmer {
    - id:  UUID                                     // using java.util.UUID for unique swimmer IDs
    - name: String
    - seedPaces: Map<StrokeType, SeedPace100>       // per 100 seed by stroke
    + getSeedTime(stroke: StrokeType): SeedPace100
    + updateSeedTime(stroke: StrokeType, seedTime: double, unit: CourseUnit): void
    + toString(): String
}
class SeedPace100 {
    - seedTimeSec: double               // seconds for 100
    - unit: CourseUnit                  // YARDS or METERS (entry unit)
    - lastUpdated: Date                 // use java.util.Date for simplicity
    + getSeedTime(): double
    + setSeedTime(value: double): void  // value is in seconds
    + getCourseUnit(): CourseUnit
    + toString(): String
}
class Workout {
    - id: UUID
    - swimmerId: UUID
    - name: String                      // workout name
    - course: Course                    // SCY, SCM, LCM
    - notes: String                     // optional, whole workout comment such as workout theme
    - timeBudgetSec: double             // may not be used in MVP - would help user to plan time-boxed workouts
    - defaultRestBetweenGroups: int            // rest between each group
    - defaultRestBetweenSets: int              // rest between each set
    - groups: List<SetGroup>
    + addSetGroup(group: SetGroup): void
    + removeSetGroup(group: SetGroup): void
    + calculateTotalTime(): double      // sum of group rest + between group rests
    + calculateSwimTime(): double       // sum of set group swim times
    + calculateRestTime(): double       // sum of set group rests
    + calculateTotalDistance(): int     // returns distance in Workout.course unit
    + toString(): String
}
class SetGroup {
    - name: String
    - order: int
    - sets: List<Set>
    - restAfterGroupSec: int                // could be used to override workout default, unsure if MVP
    + addSet(set: Set): void
    + removeSet(set: Set): void
    + calculateGroupSwimTime(): double      // sum of set.calculateSetSwimTime
    + calculateGroupRestTime(): double      // sum of set.calculateSetrestsTime
    + calculateGroupTotalTime(): double     // sum of set distances
    + calculateGroupDistance(): int         // swim + rest time for this group
    + toString(): String
}
class Set {
    - stroke: StrokeType
    - reps: int
    - distancePerRepMeters: int
    - effort: Effort
    - notes: String
    + calculateGoal(): double           // per-rep wim time (seconds)
    + calculateInterval(): double       // per-rep cycle time (seconds) = goal and derived rest time
    + calculateSetSwimTime(): double    // reps * calculateGoal()
    + calculateSetRestTime(): double    // (reps - 1) * (calculateInterval() - calculateGoal())
    + calculateSetDistance(): int       // reps * distancePerRepMeters
    + toString(): String
}

' Relationships
Swimmer "1" o-- "0..*" SeedPace100 : seedPaces (per stroke)
Workout "1" o-- "1..*" SetGroup
SetGroup "1" o-- "1..*" Set

note right of Set
  Rest per rep is derived (not stored),
  e.g., via a PaceService based on effort & distance.
  interval = goal + derivedRest
end note
@enduml

